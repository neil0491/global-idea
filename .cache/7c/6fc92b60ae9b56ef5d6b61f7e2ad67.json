{"id":"HhJi","dependencies":[{"name":"F:\\Verstka\\global-idea\\package.json","includedInParent":true,"mtime":1616000325916},{"name":"F:\\Verstka\\global-idea\\node_modules\\@popperjs\\core\\package.json","includedInParent":true,"mtime":1615381213206},{"name":"./getVariation.js","loc":{"line":1,"column":25},"parent":"F:\\Verstka\\global-idea\\node_modules\\@popperjs\\core\\lib\\utils\\computeAutoPlacement.js","resolved":"F:\\Verstka\\global-idea\\node_modules\\@popperjs\\core\\lib\\utils\\getVariation.js"},{"name":"../enums.js","loc":{"line":2,"column":81},"parent":"F:\\Verstka\\global-idea\\node_modules\\@popperjs\\core\\lib\\utils\\computeAutoPlacement.js","resolved":"F:\\Verstka\\global-idea\\node_modules\\@popperjs\\core\\lib\\enums.js"},{"name":"./detectOverflow.js","loc":{"line":3,"column":27},"parent":"F:\\Verstka\\global-idea\\node_modules\\@popperjs\\core\\lib\\utils\\computeAutoPlacement.js","resolved":"F:\\Verstka\\global-idea\\node_modules\\@popperjs\\core\\lib\\utils\\detectOverflow.js"},{"name":"./getBasePlacement.js","loc":{"line":4,"column":29},"parent":"F:\\Verstka\\global-idea\\node_modules\\@popperjs\\core\\lib\\utils\\computeAutoPlacement.js","resolved":"F:\\Verstka\\global-idea\\node_modules\\@popperjs\\core\\lib\\utils\\getBasePlacement.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = computeAutoPlacement;\n\nvar _getVariation = _interopRequireDefault(require(\"./getVariation.js\"));\n\nvar _enums = require(\"../enums.js\");\n\nvar _detectOverflow = _interopRequireDefault(require(\"./detectOverflow.js\"));\n\nvar _getBasePlacement = _interopRequireDefault(require(\"./getBasePlacement.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction computeAutoPlacement(state, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      placement = _options.placement,\n      boundary = _options.boundary,\n      rootBoundary = _options.rootBoundary,\n      padding = _options.padding,\n      flipVariations = _options.flipVariations,\n      _options$allowedAutoP = _options.allowedAutoPlacements,\n      allowedAutoPlacements = _options$allowedAutoP === void 0 ? _enums.placements : _options$allowedAutoP;\n  var variation = (0, _getVariation.default)(placement);\n  var placements = variation ? flipVariations ? _enums.variationPlacements : _enums.variationPlacements.filter(function (placement) {\n    return (0, _getVariation.default)(placement) === variation;\n  }) : _enums.basePlacements;\n  var allowedPlacements = placements.filter(function (placement) {\n    return allowedAutoPlacements.indexOf(placement) >= 0;\n  });\n\n  if (allowedPlacements.length === 0) {\n    allowedPlacements = placements;\n\n    if (\"production\" !== \"production\") {\n      console.error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, \"auto\" cannot be used to allow \"bottom-start\".', 'Use \"auto-start\" instead.'].join(' '));\n    }\n  } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...\n\n\n  var overflows = allowedPlacements.reduce(function (acc, placement) {\n    acc[placement] = (0, _detectOverflow.default)(state, {\n      placement: placement,\n      boundary: boundary,\n      rootBoundary: rootBoundary,\n      padding: padding\n    })[(0, _getBasePlacement.default)(placement)];\n    return acc;\n  }, {});\n  return Object.keys(overflows).sort(function (a, b) {\n    return overflows[a] - overflows[b];\n  });\n}"},"sourceMaps":null,"error":null,"hash":"6a8ba1aaf8bbc5f12742ba1998cfeca0","cacheData":{"env":{"NODE_ENV":"production"}}}
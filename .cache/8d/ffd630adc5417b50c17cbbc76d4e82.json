{"id":"zJlD","dependencies":[{"name":"F:\\Verstka\\global-idea\\package.json","includedInParent":true,"mtime":1616000325916},{"name":"F:\\Verstka\\global-idea\\node_modules\\@popperjs\\core\\package.json","includedInParent":true,"mtime":1615381213206},{"name":"../utils/getBasePlacement.js","loc":{"line":1,"column":29},"parent":"F:\\Verstka\\global-idea\\node_modules\\@popperjs\\core\\lib\\modifiers\\arrow.js","resolved":"F:\\Verstka\\global-idea\\node_modules\\@popperjs\\core\\lib\\utils\\getBasePlacement.js"},{"name":"../dom-utils/getLayoutRect.js","loc":{"line":2,"column":26},"parent":"F:\\Verstka\\global-idea\\node_modules\\@popperjs\\core\\lib\\modifiers\\arrow.js","resolved":"F:\\Verstka\\global-idea\\node_modules\\@popperjs\\core\\lib\\dom-utils\\getLayoutRect.js"},{"name":"../dom-utils/contains.js","loc":{"line":3,"column":21},"parent":"F:\\Verstka\\global-idea\\node_modules\\@popperjs\\core\\lib\\modifiers\\arrow.js","resolved":"F:\\Verstka\\global-idea\\node_modules\\@popperjs\\core\\lib\\dom-utils\\contains.js"},{"name":"../dom-utils/getOffsetParent.js","loc":{"line":4,"column":28},"parent":"F:\\Verstka\\global-idea\\node_modules\\@popperjs\\core\\lib\\modifiers\\arrow.js","resolved":"F:\\Verstka\\global-idea\\node_modules\\@popperjs\\core\\lib\\dom-utils\\getOffsetParent.js"},{"name":"../utils/getMainAxisFromPlacement.js","loc":{"line":5,"column":37},"parent":"F:\\Verstka\\global-idea\\node_modules\\@popperjs\\core\\lib\\modifiers\\arrow.js","resolved":"F:\\Verstka\\global-idea\\node_modules\\@popperjs\\core\\lib\\utils\\getMainAxisFromPlacement.js"},{"name":"../utils/within.js","loc":{"line":6,"column":19},"parent":"F:\\Verstka\\global-idea\\node_modules\\@popperjs\\core\\lib\\modifiers\\arrow.js","resolved":"F:\\Verstka\\global-idea\\node_modules\\@popperjs\\core\\lib\\utils\\within.js"},{"name":"../utils/mergePaddingObject.js","loc":{"line":7,"column":31},"parent":"F:\\Verstka\\global-idea\\node_modules\\@popperjs\\core\\lib\\modifiers\\arrow.js","resolved":"F:\\Verstka\\global-idea\\node_modules\\@popperjs\\core\\lib\\utils\\mergePaddingObject.js"},{"name":"../utils/expandToHashMap.js","loc":{"line":8,"column":28},"parent":"F:\\Verstka\\global-idea\\node_modules\\@popperjs\\core\\lib\\modifiers\\arrow.js","resolved":"F:\\Verstka\\global-idea\\node_modules\\@popperjs\\core\\lib\\utils\\expandToHashMap.js"},{"name":"../enums.js","loc":{"line":9,"column":57},"parent":"F:\\Verstka\\global-idea\\node_modules\\@popperjs\\core\\lib\\modifiers\\arrow.js","resolved":"F:\\Verstka\\global-idea\\node_modules\\@popperjs\\core\\lib\\enums.js"},{"name":"../dom-utils/instanceOf.js","loc":{"line":10,"column":30},"parent":"F:\\Verstka\\global-idea\\node_modules\\@popperjs\\core\\lib\\modifiers\\arrow.js","resolved":"F:\\Verstka\\global-idea\\node_modules\\@popperjs\\core\\lib\\dom-utils\\instanceOf.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _getBasePlacement = _interopRequireDefault(require(\"../utils/getBasePlacement.js\"));\n\nvar _getLayoutRect = _interopRequireDefault(require(\"../dom-utils/getLayoutRect.js\"));\n\nvar _contains = _interopRequireDefault(require(\"../dom-utils/contains.js\"));\n\nvar _getOffsetParent = _interopRequireDefault(require(\"../dom-utils/getOffsetParent.js\"));\n\nvar _getMainAxisFromPlacement = _interopRequireDefault(require(\"../utils/getMainAxisFromPlacement.js\"));\n\nvar _within = _interopRequireDefault(require(\"../utils/within.js\"));\n\nvar _mergePaddingObject = _interopRequireDefault(require(\"../utils/mergePaddingObject.js\"));\n\nvar _expandToHashMap = _interopRequireDefault(require(\"../utils/expandToHashMap.js\"));\n\nvar _enums = require(\"../enums.js\");\n\nvar _instanceOf = require(\"../dom-utils/instanceOf.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// eslint-disable-next-line import/no-unused-modules\nvar toPaddingObject = function toPaddingObject(padding, state) {\n  padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {\n    placement: state.placement\n  })) : padding;\n  return (0, _mergePaddingObject.default)(typeof padding !== 'number' ? padding : (0, _expandToHashMap.default)(padding, _enums.basePlacements));\n};\n\nfunction arrow(_ref) {\n  var _state$modifiersData$;\n\n  var state = _ref.state,\n      name = _ref.name,\n      options = _ref.options;\n  var arrowElement = state.elements.arrow;\n  var popperOffsets = state.modifiersData.popperOffsets;\n  var basePlacement = (0, _getBasePlacement.default)(state.placement);\n  var axis = (0, _getMainAxisFromPlacement.default)(basePlacement);\n  var isVertical = [_enums.left, _enums.right].indexOf(basePlacement) >= 0;\n  var len = isVertical ? 'height' : 'width';\n\n  if (!arrowElement || !popperOffsets) {\n    return;\n  }\n\n  var paddingObject = toPaddingObject(options.padding, state);\n  var arrowRect = (0, _getLayoutRect.default)(arrowElement);\n  var minProp = axis === 'y' ? _enums.top : _enums.left;\n  var maxProp = axis === 'y' ? _enums.bottom : _enums.right;\n  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];\n  var startDiff = popperOffsets[axis] - state.rects.reference[axis];\n  var arrowOffsetParent = (0, _getOffsetParent.default)(arrowElement);\n  var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;\n  var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is\n  // outside of the popper bounds\n\n  var min = paddingObject[minProp];\n  var max = clientSize - arrowRect[len] - paddingObject[maxProp];\n  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;\n  var offset = (0, _within.default)(min, center, max); // Prevents breaking syntax highlighting...\n\n  var axisProp = axis;\n  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);\n}\n\nfunction effect(_ref2) {\n  var state = _ref2.state,\n      options = _ref2.options;\n  var _options$element = options.element,\n      arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;\n\n  if (arrowElement == null) {\n    return;\n  } // CSS selector\n\n\n  if (typeof arrowElement === 'string') {\n    arrowElement = state.elements.popper.querySelector(arrowElement);\n\n    if (!arrowElement) {\n      return;\n    }\n  }\n\n  if (\"production\" !== \"production\") {\n    if (!(0, _instanceOf.isHTMLElement)(arrowElement)) {\n      console.error(['Popper: \"arrow\" element must be an HTMLElement (not an SVGElement).', 'To use an SVG arrow, wrap it in an HTMLElement that will be used as', 'the arrow.'].join(' '));\n    }\n  }\n\n  if (!(0, _contains.default)(state.elements.popper, arrowElement)) {\n    if (\"production\" !== \"production\") {\n      console.error(['Popper: \"arrow\" modifier\\'s `element` must be a child of the popper', 'element.'].join(' '));\n    }\n\n    return;\n  }\n\n  state.elements.arrow = arrowElement;\n} // eslint-disable-next-line import/no-unused-modules\n\n\nvar _default = {\n  name: 'arrow',\n  enabled: true,\n  phase: 'main',\n  fn: arrow,\n  effect: effect,\n  requires: ['popperOffsets'],\n  requiresIfExists: ['preventOverflow']\n};\nexports.default = _default;"},"sourceMaps":null,"error":null,"hash":"3a25403b4e09be709a27b8699817a8d8","cacheData":{"env":{"NODE_ENV":"production"}}}